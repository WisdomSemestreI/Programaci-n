

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sat Nov 23 13:43:19 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4585
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    17                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    18  0000                     
    19                           ; Version 2.10
    20                           ; Generated 31/07/2019 GMT
    21                           ; 
    22                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC18F4585 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     
    54                           	psect	idataCOMRAM
    55  00BEC2                     __pidataCOMRAM:
    56                           	opt callstack 0
    57                           
    58                           ;initializer for main@F10453
    59  00BEC2  48                 	db	72
    60  00BEC3  6F                 	db	111
    61  00BEC4  6C                 	db	108
    62  00BEC5  61                 	db	97
    63  00BEC6  20                 	db	32
    64  00BEC7  4D                 	db	77
    65  00BEC8  75                 	db	117
    66  00BEC9  6E                 	db	110
    67  00BECA  64                 	db	100
    68  00BECB  6F                 	db	111
    69  00BECC  0A                 	db	10
    70  00BECD  00                 	db	0
    71  0000                     _RCREG	set	4014
    72  0000                     _PIR1bits	set	3998
    73  0000                     _TXREG	set	4013
    74  0000                     _TXSTAbits	set	4012
    75  0000                     _SPBRG	set	4015
    76  0000                     _RCSTA	set	4011
    77  0000                     _TXSTA	set	4012
    78  0000                     _TRISCbits	set	3988
    79  0000                     _ADCON1	set	4033
    80  0000                     _CVRCONbits	set	4021
    81  0000                     _CMCON	set	4020
    82  0000                     _OSCCON	set	4051
    83                           
    84                           ; #config settings
    85  0000                     
    86                           	psect	cinit
    87  00BF10                     __pcinit:
    88                           	opt callstack 0
    89  00BF10                     start_initialization:
    90                           	opt callstack 0
    91  00BF10                     __initialization:
    92                           	opt callstack 0
    93                           
    94                           ; Initialize objects allocated to COMRAM (12 bytes)
    95                           ; load TBLPTR registers with __pidataCOMRAM
    96  00BF10  0EC2               	movlw	low __pidataCOMRAM
    97  00BF12  6EF6               	movwf	tblptrl,c
    98  00BF14  0EBE               	movlw	high __pidataCOMRAM
    99  00BF16  6EF7               	movwf	tblptrh,c
   100  00BF18  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   101  00BF1A  6EF8               	movwf	tblptru,c
   102  00BF1C  EE00  F013         	lfsr	0,__pdataCOMRAM
   103  00BF20  EE10 F00C          	lfsr	1,12
   104  00BF24                     copy_data0:
   105  00BF24  0009               	tblrd		*+
   106  00BF26  CFF5 FFEE          	movff	tablat,postinc0
   107  00BF2A  50E5               	movf	postdec1,w,c
   108  00BF2C  50E1               	movf	fsr1l,w,c
   109  00BF2E  E1FA               	bnz	copy_data0
   110                           
   111                           ; Clear objects allocated to COMRAM (1 bytes)
   112  00BF30  6A1F               	clrf	__pbssCOMRAM& (0+255),c
   113  00BF32                     end_of_initialization:
   114                           	opt callstack 0
   115  00BF32                     __end_of__initialization:
   116                           	opt callstack 0
   117  00BF32  0100               	movlb	0
   118  00BF34  EFD9  F05F         	goto	_main	;jump to C main() function
   119                           
   120                           	psect	bssCOMRAM
   121  00001F                     __pbssCOMRAM:
   122                           	opt callstack 0
   123  00001F                     _RX_Data:
   124                           	opt callstack 0
   125  00001F                     	ds	1
   126                           
   127                           	psect	dataCOMRAM
   128  000013                     __pdataCOMRAM:
   129                           	opt callstack 0
   130  000013                     main@F10453:
   131                           	opt callstack 0
   132  000013                     	ds	12
   133                           
   134                           	psect	cstackCOMRAM
   135  000001                     __pcstackCOMRAM:
   136                           	opt callstack 0
   137  000001                     SEND_UART@TX_Data:
   138                           	opt callstack 0
   139  000001                     RECEIVE_STRING@guardarscan:
   140                           	opt callstack 0
   141                           
   142                           ; 2 bytes @ 0x0
   143  000001                     	ds	1
   144  000002                     SEND_STRING@PointString:
   145                           	opt callstack 0
   146                           
   147                           ; 2 bytes @ 0x1
   148  000002                     	ds	1
   149  000003                     RECEIVE_STRING@numcaracteres:
   150                           	opt callstack 0
   151                           
   152                           ; 1 bytes @ 0x2
   153  000003                     	ds	1
   154  000004                     SEND_STRING@i:
   155                           	opt callstack 0
   156  000004                     RECEIVE_STRING@i:
   157                           	opt callstack 0
   158                           
   159                           ; 1 bytes @ 0x3
   160  000004                     	ds	1
   161  000005                     main@Texto:
   162                           	opt callstack 0
   163                           
   164                           ; 12 bytes @ 0x4
   165  000005                     	ds	12
   166  000011                     main@Ptr:
   167                           	opt callstack 0
   168                           
   169                           ; 2 bytes @ 0x10
   170  000011                     	ds	2
   171                           
   172 ;;
   173 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   174 ;;
   175 ;; *************** function _main *****************
   176 ;; Defined at:
   177 ;;		line 15 in file "Serial_Uso.c"
   178 ;; Parameters:    Size  Location     Type
   179 ;;		None
   180 ;; Auto vars:     Size  Location     Type
   181 ;;  Texto          12    4[COMRAM] unsigned char [12]
   182 ;;  Ptr             2   16[COMRAM] PTR unsigned char 
   183 ;;		 -> main@Texto(12), 
   184 ;; Return value:  Size  Location     Type
   185 ;;                  1    wreg      void 
   186 ;; Registers used:
   187 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   188 ;; Tracked objects:
   189 ;;		On entry : 0/0
   190 ;;		On exit  : 0/0
   191 ;;		Unchanged: 0/0
   192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   194 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   196 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   197 ;;Total ram usage:       14 bytes
   198 ;; Hardware stack levels required when called:    2
   199 ;; This function calls:
   200 ;;		_INIT_UART
   201 ;;		_RECEIVE_STRING
   202 ;;		_SEND_STRING
   203 ;; This function is called by:
   204 ;;		Startup code after reset
   205 ;; This function uses a non-reentrant model
   206 ;;
   207                           
   208                           	psect	text0
   209  00BFB2                     __ptext0:
   210                           	opt callstack 0
   211  00BFB2                     _main:
   212                           	opt callstack 29
   213  00BFB2                     
   214                           ;Serial_Uso.c: 18:         RECEIVE_STRING(Ptr,9);
   215  00BFB2  0E60               	movlw	96
   216  00BFB4  6ED3               	movwf	211,c	;volatile
   217  00BFB6                     
   218                           ;Serial_Uso.c: 21:     return;
   219  00BFB6  68B4               	setf	180,c	;volatile
   220  00BFB8                     
   221                           ;Serial_Uso.c: 22: }
   222  00BFB8  9EB5               	bcf	181,7,c	;volatile
   223  00BFBA  0E0F               	movlw	15
   224  00BFBC  6EC1               	movwf	193,c	;volatile
   225  00BFBE  EC67  F05F         	call	_INIT_UART	;wreg free
   226  00BFC2  EE20  F013         	lfsr	2,main@F10453
   227  00BFC6  EE10  F005         	lfsr	1,main@Texto
   228  00BFCA  0E0B               	movlw	11
   229  00BFCC                     u101:
   230  00BFCC  CFDB FFE3          	movff	plusw2,plusw1
   231  00BFD0  06E8               	decf	wreg,f,c
   232  00BFD2  E2FC               	bc	u101
   233  00BFD4  0E05               	movlw	low main@Texto
   234  00BFD6  6E11               	movwf	main@Ptr^0,c
   235  00BFD8  0E00               	movlw	high main@Texto
   236  00BFDA  6E12               	movwf	(main@Ptr+1)^0,c
   237  00BFDC                     l845:
   238  00BFDC  C011  F002         	movff	main@Ptr,SEND_STRING@PointString
   239  00BFE0  C012  F003         	movff	main@Ptr+1,SEND_STRING@PointString+1
   240  00BFE4  ECB4  F05F         	call	_SEND_STRING	;wreg free
   241  00BFE8  C011  F001         	movff	main@Ptr,RECEIVE_STRING@guardarscan
   242  00BFEC  C012  F002         	movff	main@Ptr+1,RECEIVE_STRING@guardarscan+1
   243  00BFF0  0E09               	movlw	9
   244  00BFF2  6E03               	movwf	RECEIVE_STRING@numcaracteres^0,c
   245  00BFF4  EC9C  F05F         	call	_RECEIVE_STRING	;wreg free
   246  00BFF8  EFEE  F05F         	goto	l845
   247  00BFFC  EF00  F000         	goto	start
   248  00C000                     __end_of_main:
   249                           	opt callstack 0
   250                           
   251 ;; *************** function _SEND_STRING *****************
   252 ;; Defined at:
   253 ;;		line 5 in file "SERIAL.c"
   254 ;; Parameters:    Size  Location     Type
   255 ;;  PointString     2    1[COMRAM] PTR unsigned char 
   256 ;;		 -> main@Texto(12), 
   257 ;; Auto vars:     Size  Location     Type
   258 ;;  i               1    3[COMRAM] unsigned char 
   259 ;; Return value:  Size  Location     Type
   260 ;;                  1    wreg      void 
   261 ;; Registers used:
   262 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   263 ;; Tracked objects:
   264 ;;		On entry : 0/0
   265 ;;		On exit  : 0/0
   266 ;;		Unchanged: 0/0
   267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   268 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   269 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   271 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   272 ;;Total ram usage:        3 bytes
   273 ;; Hardware stack levels used:    1
   274 ;; Hardware stack levels required when called:    1
   275 ;; This function calls:
   276 ;;		_SEND_UART
   277 ;; This function is called by:
   278 ;;		_main
   279 ;; This function uses a non-reentrant model
   280 ;;
   281                           
   282                           	psect	text1
   283  00BF68                     __ptext1:
   284                           	opt callstack 0
   285  00BF68                     _SEND_STRING:
   286                           	opt callstack 29
   287  00BF68                     
   288                           ;SERIAL.c: 6:     for (unsigned char i = 0; i < 255; i++) {
   289  00BF68  0E00               	movlw	0
   290  00BF6A  6E04               	movwf	SEND_STRING@i^0,c
   291  00BF6C                     l815:
   292                           
   293                           ;SERIAL.c: 7:         if (PointString[i] == ((void*)0)) {
   294  00BF6C  5004               	movf	SEND_STRING@i^0,w,c
   295  00BF6E  2402               	addwf	SEND_STRING@PointString^0,w,c
   296  00BF70  6ED9               	movwf	fsr2l,c
   297  00BF72  0E00               	movlw	0
   298  00BF74  2003               	addwfc	(SEND_STRING@PointString+1)^0,w,c
   299  00BF76  6EDA               	movwf	fsr2h,c
   300  00BF78  50DF               	movf	indf2,w,c
   301  00BF7A  A4D8               	btfss	status,2,c
   302  00BF7C  EFC2  F05F         	goto	u71
   303  00BF80  EFC4  F05F         	goto	u70
   304  00BF84                     u71:
   305  00BF84  EFC6  F05F         	goto	l819
   306  00BF88                     u70:
   307  00BF88  EFD8  F05F         	goto	l12
   308  00BF8C                     l819:
   309                           
   310                           ;SERIAL.c: 10:         SEND_UART(PointString[i]);
   311  00BF8C  5004               	movf	SEND_STRING@i^0,w,c
   312  00BF8E  2402               	addwf	SEND_STRING@PointString^0,w,c
   313  00BF90  6ED9               	movwf	fsr2l,c
   314  00BF92  0E00               	movlw	0
   315  00BF94  2003               	addwfc	(SEND_STRING@PointString+1)^0,w,c
   316  00BF96  6EDA               	movwf	fsr2h,c
   317  00BF98  50DF               	movf	indf2,w,c
   318  00BF9A  EC70  F05F         	call	_SEND_UART
   319  00BF9E                     
   320                           ;SERIAL.c: 12:     }
   321  00BF9E  2A04               	incf	SEND_STRING@i^0,f,c
   322  00BFA0  2804               	incf	SEND_STRING@i^0,w,c
   323  00BFA2  A4D8               	btfss	status,2,c
   324  00BFA4  EFD6  F05F         	goto	u81
   325  00BFA8  EFD8  F05F         	goto	u80
   326  00BFAC                     u81:
   327  00BFAC  EFB6  F05F         	goto	l815
   328  00BFB0                     u80:
   329  00BFB0                     l12:
   330  00BFB0  0012               	return		;funcret
   331  00BFB2                     __end_of_SEND_STRING:
   332                           	opt callstack 0
   333                           
   334 ;; *************** function _SEND_UART *****************
   335 ;; Defined at:
   336 ;;		line 16 in file "UART.c"
   337 ;; Parameters:    Size  Location     Type
   338 ;;  TX_Data         1    wreg     unsigned char 
   339 ;; Auto vars:     Size  Location     Type
   340 ;;  TX_Data         1    0[COMRAM] unsigned char 
   341 ;; Return value:  Size  Location     Type
   342 ;;                  1    wreg      void 
   343 ;; Registers used:
   344 ;;		wreg
   345 ;; Tracked objects:
   346 ;;		On entry : 0/0
   347 ;;		On exit  : 0/0
   348 ;;		Unchanged: 0/0
   349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   351 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   353 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   354 ;;Total ram usage:        1 bytes
   355 ;; Hardware stack levels used:    1
   356 ;; This function calls:
   357 ;;		Nothing
   358 ;; This function is called by:
   359 ;;		_SEND_STRING
   360 ;; This function uses a non-reentrant model
   361 ;;
   362                           
   363                           	psect	text2
   364  00BEE0                     __ptext2:
   365                           	opt callstack 0
   366  00BEE0                     _SEND_UART:
   367                           	opt callstack 29
   368                           
   369                           ;incstack = 0
   370                           ;SEND_UART@TX_Data stored from wreg
   371  00BEE0  6E01               	movwf	SEND_UART@TX_Data^0,c
   372  00BEE2                     l68:
   373                           
   374                           ;UART.c: 17:     while (TXSTAbits.TRMT == 0) {
   375  00BEE2  A2AC               	btfss	172,1,c	;volatile
   376  00BEE4  EF76  F05F         	goto	u11
   377  00BEE8  EF78  F05F         	goto	u10
   378  00BEEC                     u11:
   379  00BEEC  EF71  F05F         	goto	l68
   380  00BEF0                     u10:
   381  00BEF0                     
   382                           ;UART.c: 19:     TXREG = TX_Data;
   383  00BEF0  C001  FFAD         	movff	SEND_UART@TX_Data,4013	;volatile
   384  00BEF4  0012               	return		;funcret
   385  00BEF6                     __end_of_SEND_UART:
   386                           	opt callstack 0
   387                           
   388 ;; *************** function _RECEIVE_STRING *****************
   389 ;; Defined at:
   390 ;;		line 16 in file "SERIAL.c"
   391 ;; Parameters:    Size  Location     Type
   392 ;;  guardarscan     2    0[COMRAM] PTR unsigned char 
   393 ;;		 -> main@Texto(12), 
   394 ;;  numcaractere    1    2[COMRAM] unsigned char 
   395 ;; Auto vars:     Size  Location     Type
   396 ;;  i               1    3[COMRAM] unsigned char 
   397 ;; Return value:  Size  Location     Type
   398 ;;                  1    wreg      void 
   399 ;; Registers used:
   400 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   401 ;; Tracked objects:
   402 ;;		On entry : 0/0
   403 ;;		On exit  : 0/0
   404 ;;		Unchanged: 0/0
   405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   406 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   407 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   409 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   410 ;;Total ram usage:        4 bytes
   411 ;; Hardware stack levels used:    1
   412 ;; Hardware stack levels required when called:    1
   413 ;; This function calls:
   414 ;;		_RECEIVE_UART
   415 ;; This function is called by:
   416 ;;		_main
   417 ;; This function uses a non-reentrant model
   418 ;;
   419                           
   420                           	psect	text3
   421  00BF38                     __ptext3:
   422                           	opt callstack 0
   423  00BF38                     _RECEIVE_STRING:
   424                           	opt callstack 29
   425  00BF38                     
   426                           ;SERIAL.c: 17:     for (unsigned char i = 0; i < numcaracteres; i++) {
   427  00BF38  0E00               	movlw	0
   428  00BF3A  6E04               	movwf	RECEIVE_STRING@i^0,c
   429  00BF3C  EFAA  F05F         	goto	l831
   430  00BF40                     l827:
   431                           
   432                           ;SERIAL.c: 18:         guardarscan[i] = RECEIVE_UART();
   433  00BF40  5004               	movf	RECEIVE_STRING@i^0,w,c
   434  00BF42  2401               	addwf	RECEIVE_STRING@guardarscan^0,w,c
   435  00BF44  6ED9               	movwf	fsr2l,c
   436  00BF46  0E00               	movlw	0
   437  00BF48  2002               	addwfc	(RECEIVE_STRING@guardarscan+1)^0,w,c
   438  00BF4A  6EDA               	movwf	fsr2h,c
   439  00BF4C  EC7B  F05F         	call	_RECEIVE_UART	;wreg free
   440  00BF50  6EDF               	movwf	indf2,c
   441  00BF52                     
   442                           ;SERIAL.c: 19:     }
   443  00BF52  2A04               	incf	RECEIVE_STRING@i^0,f,c
   444  00BF54                     l831:
   445  00BF54  5003               	movf	RECEIVE_STRING@numcaracteres^0,w,c
   446  00BF56  5C04               	subwf	RECEIVE_STRING@i^0,w,c
   447  00BF58  A0D8               	btfss	status,0,c
   448  00BF5A  EFB1  F05F         	goto	u91
   449  00BF5E  EFB3  F05F         	goto	u90
   450  00BF62                     u91:
   451  00BF62  EFA0  F05F         	goto	l827
   452  00BF66                     u90:
   453  00BF66  0012               	return		;funcret
   454  00BF68                     __end_of_RECEIVE_STRING:
   455                           	opt callstack 0
   456                           
   457 ;; *************** function _RECEIVE_UART *****************
   458 ;; Defined at:
   459 ;;		line 23 in file "UART.c"
   460 ;; Parameters:    Size  Location     Type
   461 ;;		None
   462 ;; Auto vars:     Size  Location     Type
   463 ;;		None
   464 ;; Return value:  Size  Location     Type
   465 ;;                  1    wreg      unsigned char 
   466 ;; Registers used:
   467 ;;		wreg, status,2
   468 ;; Tracked objects:
   469 ;;		On entry : 0/0
   470 ;;		On exit  : 0/0
   471 ;;		Unchanged: 0/0
   472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   476 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   477 ;;Total ram usage:        0 bytes
   478 ;; Hardware stack levels used:    1
   479 ;; This function calls:
   480 ;;		Nothing
   481 ;; This function is called by:
   482 ;;		_RECEIVE_STRING
   483 ;; This function uses a non-reentrant model
   484 ;;
   485                           
   486                           	psect	text4
   487  00BEF6                     __ptext4:
   488                           	opt callstack 0
   489  00BEF6                     _RECEIVE_UART:
   490                           	opt callstack 29
   491  00BEF6                     l74:
   492                           
   493                           ;UART.c: 24:     while (PIR1bits.RCIF == 0) {
   494  00BEF6  AA9E               	btfss	158,5,c	;volatile
   495  00BEF8  EF80  F05F         	goto	u21
   496  00BEFC  EF82  F05F         	goto	u20
   497  00BF00                     u21:
   498  00BF00  EF7B  F05F         	goto	l74
   499  00BF04                     u20:
   500  00BF04                     
   501                           ;UART.c: 27:     RX_Data = RCREG;
   502  00BF04  CFAE F01F          	movff	4014,_RX_Data	;volatile
   503  00BF08                     
   504                           ;UART.c: 28:     RCREG = 0;
   505  00BF08  0E00               	movlw	0
   506  00BF0A  6EAE               	movwf	174,c	;volatile
   507                           
   508                           ;UART.c: 29:     return RX_Data;
   509  00BF0C  501F               	movf	_RX_Data^0,w,c
   510  00BF0E  0012               	return		;funcret
   511  00BF10                     __end_of_RECEIVE_UART:
   512                           	opt callstack 0
   513                           
   514 ;; *************** function _INIT_UART *****************
   515 ;; Defined at:
   516 ;;		line 4 in file "UART.c"
   517 ;; Parameters:    Size  Location     Type
   518 ;;		None
   519 ;; Auto vars:     Size  Location     Type
   520 ;;		None
   521 ;; Return value:  Size  Location     Type
   522 ;;                  1    wreg      void 
   523 ;; Registers used:
   524 ;;		wreg, status,2
   525 ;; Tracked objects:
   526 ;;		On entry : 0/0
   527 ;;		On exit  : 0/0
   528 ;;		Unchanged: 0/0
   529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   533 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   534 ;;Total ram usage:        0 bytes
   535 ;; Hardware stack levels used:    1
   536 ;; This function calls:
   537 ;;		Nothing
   538 ;; This function is called by:
   539 ;;		_main
   540 ;; This function uses a non-reentrant model
   541 ;;
   542                           
   543                           	psect	text5
   544  00BECE                     __ptext5:
   545                           	opt callstack 0
   546  00BECE                     _INIT_UART:
   547                           	opt callstack 30
   548  00BECE                     
   549                           ;UART.c: 8:     TRISCbits.TRISC7 = 1;
   550  00BECE  8E94               	bsf	148,7,c	;volatile
   551                           
   552                           ;UART.c: 9:     TRISCbits.TRISC6 = 0;
   553  00BED0  9C94               	bcf	148,6,c	;volatile
   554  00BED2                     
   555                           ;UART.c: 10:     TXSTA = 0b00100110;
   556  00BED2  0E26               	movlw	38
   557  00BED4  6EAC               	movwf	172,c	;volatile
   558                           
   559                           ;UART.c: 11:     RCSTA = 0b10010000;
   560  00BED6  0E90               	movlw	144
   561  00BED8  6EAB               	movwf	171,c	;volatile
   562                           
   563                           ;UART.c: 13:     SPBRG = 25;
   564  00BEDA  0E19               	movlw	25
   565  00BEDC  6EAF               	movwf	175,c	;volatile
   566  00BEDE  0012               	return		;funcret
   567  00BEE0                     __end_of_INIT_UART:
   568                           	opt callstack 0
   569  0000                     
   570                           	psect	rparam
   571  0000                     tosu	equ	0xFFF
   572                           tosh	equ	0xFFE
   573                           tosl	equ	0xFFD
   574                           stkptr	equ	0xFFC
   575                           pclatu	equ	0xFFB
   576                           pclath	equ	0xFFA
   577                           pcl	equ	0xFF9
   578                           tblptru	equ	0xFF8
   579                           tblptrh	equ	0xFF7
   580                           tblptrl	equ	0xFF6
   581                           tablat	equ	0xFF5
   582                           prodh	equ	0xFF4
   583                           prodl	equ	0xFF3
   584                           indf0	equ	0xFEF
   585                           postinc0	equ	0xFEE
   586                           postdec0	equ	0xFED
   587                           preinc0	equ	0xFEC
   588                           plusw0	equ	0xFEB
   589                           fsr0h	equ	0xFEA
   590                           fsr0l	equ	0xFE9
   591                           wreg	equ	0xFE8
   592                           indf1	equ	0xFE7
   593                           postinc1	equ	0xFE6
   594                           postdec1	equ	0xFE5
   595                           preinc1	equ	0xFE4
   596                           plusw1	equ	0xFE3
   597                           fsr1h	equ	0xFE2
   598                           fsr1l	equ	0xFE1
   599                           bsr	equ	0xFE0
   600                           indf2	equ	0xFDF
   601                           postinc2	equ	0xFDE
   602                           postdec2	equ	0xFDD
   603                           preinc2	equ	0xFDC
   604                           plusw2	equ	0xFDB
   605                           fsr2h	equ	0xFDA
   606                           fsr2l	equ	0xFD9
   607                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        12
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     18      31
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0

Pointer List with Targets:

    main@Ptr	PTR unsigned char  size(2) Largest target is 12
		 -> main@Texto(COMRAM[12]), 

    RECEIVE_STRING@guardarscan	PTR unsigned char  size(2) Largest target is 12
		 -> main@Texto(COMRAM[12]), 

    SEND_STRING@PointString	PTR unsigned char  size(2) Largest target is 12
		 -> main@Texto(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_RECEIVE_STRING
    _main->_SEND_STRING
    _SEND_STRING->_SEND_UART

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                14    14      0     539
                                              4 COMRAM    14    14      0
                          _INIT_UART
                     _RECEIVE_STRING
                        _SEND_STRING
 ---------------------------------------------------------------------------------
 (1) _SEND_STRING                                          3     1      2     225
                                              1 COMRAM     3     1      2
                          _SEND_UART
 ---------------------------------------------------------------------------------
 (2) _SEND_UART                                            1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _RECEIVE_STRING                                       4     1      3     242
                                              0 COMRAM     4     1      3
                       _RECEIVE_UART
 ---------------------------------------------------------------------------------
 (2) _RECEIVE_UART                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _INIT_UART                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _INIT_UART
   _RECEIVE_STRING
     _RECEIVE_UART
   _SEND_STRING
     _SEND_UART

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             CFF      0       0      31        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     12      1F       1       32.6%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      1F      20        0.0%
DATA                 0      0      1F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sat Nov 23 13:43:19 2019

                         l12 BFB0                           l18 BF66                           l71 BEF4  
                         l65 BEDE                           l74 BEF6                           l76 BF04  
                         l68 BEE2                           l77 BF0E                           u10 BEF0  
                         u11 BEEC                           u20 BF04                           u21 BF00  
                         u70 BF88                           u71 BF84                           u80 BFB0  
                         u81 BFAC                           u90 BF66                           u91 BF62  
                        l821 BF9E                          l831 BF54                          l823 BFA0  
                        l815 BF6C                          l761 BF08                          l825 BF38  
                        l753 BEE2                          l809 BF68                          l841 BFC2  
                        l833 BFB2                          l827 BF40                          l755 BEF0  
                        l819 BF8C                          l843 BFD4                          l835 BFB6  
                        l829 BF52                          l845 BFDC                          l837 BFB8  
                        l791 BED2                          l759 BEF6                          l847 BFE8  
                        l839 BFBE                          l789 BECE                          u101 BFCC  
                        wreg 000FE8                 __CFG_LVP$OFF 000000                 __CFG_WDT$OFF 000000  
                       _main BFB2                         indf2 000FDF                         fsr1l 000FE1  
                       fsr2l 000FD9                         start 0000      __size_of_RECEIVE_STRING 0030  
         __size_of_INIT_UART 0012                __CFG_MCLRE$ON 000000                 ___param_bank 000000  
         __size_of_SEND_UART 0016                        ?_main 0001                        _CMCON 000FB4  
                      _RCREG 000FAE                        _RCSTA 000FAB                        _SPBRG 000FAF  
                      _TXREG 000FAD                        _TXSTA 000FAC                ?_RECEIVE_UART 0001  
            RECEIVE_STRING@i 0004                        tablat 000FF5                        plusw1 000FE3  
                      plusw2 000FDB                        status 000FD8                 ?_SEND_STRING 0002  
            __initialization BF10                 __end_of_main C000                       ??_main 0005  
              __activetblptr 000000               ??_RECEIVE_UART 0001            __end_of_INIT_UART BEE0  
                     _ADCON1 000FC1                       _OSCCON 000FD3            __end_of_SEND_UART BEF6  
               __pdataCOMRAM 0013                       tblptrh 000FF7                       tblptrl 000FF6  
                     tblptru 000FF8                   __accesstop 0060      __end_of__initialization BF32  
            __CFG_PBADEN$OFF 000000                ___rparam_used 000001               _RECEIVE_STRING BF38  
             __pcstackCOMRAM 0001       __end_of_RECEIVE_STRING BF68         __end_of_RECEIVE_UART BF10  
       __size_of_SEND_STRING 004A                      _RX_Data 001F              ?_RECEIVE_STRING 0001  
                    __Hparam 0000                      __Lparam 0000             SEND_UART@TX_Data 0001  
                    __pcinit BF10                      __ramtop 0D00                      __ptext0 BFB2  
                    __ptext1 BF68                      __ptext2 BEE0                      __ptext3 BF38  
                    __ptext4 BEF6                      __ptext5 BECE                      main@Ptr 0011  
       end_of_initialization BF32                    _INIT_UART BECE                    _SEND_UART BEE0  
                    postdec1 000FE5                      postinc0 000FEE                   main@F10453 0013  
                  _TRISCbits 000F94                   ?_INIT_UART 0001        __size_of_RECEIVE_UART 001A  
                  _TXSTAbits 000FAC                   ?_SEND_UART 0001    RECEIVE_STRING@guardarscan 0001  
              __pidataCOMRAM BEC2          start_initialization BF10                 _RECEIVE_UART BEF6  
           __CFG_OSC$IRCIO67 000000                 SEND_STRING@i 0004                  __pbssCOMRAM 001F  
           ??_RECEIVE_STRING 0004                  ??_INIT_UART 0001                ??_SEND_STRING 0004  
                ??_SEND_UART 0001  RECEIVE_STRING@numcaracteres 0003                     _PIR1bits 000F9E  
     SEND_STRING@PointString 0002          __end_of_SEND_STRING BFB2                    main@Texto 0005  
                  copy_data0 BF24                     __Hrparam 0000                     __Lrparam 0000  
              __size_of_main 004E                  _SEND_STRING BF68                   _CVRCONbits 000FB5  
